Starting parse
Entering state 0
Reading a token: Next token is token CLASS (: )
Shifting token CLASS (: )
Entering state 2
Reading a token: Next token is token TYPEID (: )
Shifting token TYPEID (: )
Entering state 8
Reading a token: Next token is token '{' (: )
Shifting token '{' (: )
Entering state 13
Reading a token: Next token is token TYPEID (: )
"error.cl", line 2: syntax error at or near TYPEID = AKFSDFJDXF
Shifting token error (: )
Entering state 14
Next token is token TYPEID (: )
Error: discarding token TYPEID (: )
Shifting token error (: )
Entering state 14
Reading a token: Next token is token '}' (: )
Reducing stack by rule 8 (line 181):
-> $$ = nterm optional_feature_list (: )
Stack now 0 2 8 13 14 14
Entering state 20
Next token is token '}' (: )
Reducing stack by rule 11 (line 186):
   $1 = token error (: )
   $2 = nterm optional_feature_list (: )
-> $$ = nterm optional_feature_list (: )
Stack now 0 2 8 13 14
Entering state 20
Next token is token '}' (: )
Reducing stack by rule 11 (line 186):
   $1 = token error (: )
   $2 = nterm optional_feature_list (: )
-> $$ = nterm optional_feature_list (: )
Stack now 0 2 8 13
Entering state 19
Next token is token '}' (: )
Shifting token '}' (: )
Entering state 26
Reading a token: Next token is token ';' (: )
Shifting token ';' (: )
Entering state 34
Reducing stack by rule 4 (line 171):
   $1 = token CLASS (: )
   $2 = token TYPEID (: )
   $3 = token '{' (: )
   $4 = nterm optional_feature_list (: )
   $5 = token '}' (: )
   $6 = token ';' (: )
-> $$ = nterm class (: )
Stack now 0
Entering state 5
Reducing stack by rule 2 (line 163):
   $1 = nterm class (: )
-> $$ = nterm class_list (: )
Stack now 0
Entering state 4
Reading a token: Next token is token CLASS (: )
Shifting token CLASS (: )
Entering state 2
Reading a token: Next token is token TYPEID (: )
Shifting token TYPEID (: )
Entering state 8
Reading a token: Next token is token INHERITS (: )
Shifting token INHERITS (: )
Entering state 12
Reading a token: Next token is token TYPEID (: )
Shifting token TYPEID (: )
Entering state 18
Reading a token: Next token is token '{' (: )
Shifting token '{' (: )
Entering state 25
Reading a token: Next token is token '}' (: )
Reducing stack by rule 8 (line 181):
-> $$ = nterm optional_feature_list (: )
Stack now 0 4 2 8 12 18 25
Entering state 33
Next token is token '}' (: )
Shifting token '}' (: )
Entering state 41
Reading a token: Next token is token ';' (: )
Shifting token ';' (: )
Entering state 62
Reducing stack by rule 5 (line 174):
   $1 = token CLASS (: )
   $2 = token TYPEID (: )
   $3 = token INHERITS (: )
   $4 = token TYPEID (: )
   $5 = token '{' (: )
   $6 = nterm optional_feature_list (: )
   $7 = token '}' (: )
   $8 = token ';' (: )
-> $$ = nterm class (: )
Stack now 0 4
Entering state 10
Reducing stack by rule 3 (line 166):
   $1 = nterm class_list (: )
   $2 = nterm class (: )
-> $$ = nterm class_list (: )
Stack now 0
Entering state 4
Reading a token: Now at end of input.
Reducing stack by rule 1 (line 160):
   $1 = nterm class_list (: )
-> $$ = nterm program (: )
Stack now 0
Entering state 3
Now at end of input.
Shifting token $end (: )
Entering state 9
Stack now 0 3 9
Cleanup: popping token $end (: )
Cleanup: popping nterm program (: )
Compilation halted due to lex and parse errors
